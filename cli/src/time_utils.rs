//! Most of the `todo` libraries use the `todo_clock` crate, which delegates the
//! "current time" to an instantiable trait whose default implementation uses
//! the system time, but which can be overridden for testing purposes.
//!
//! This pattern is not usable when testing the command line parsing logic that
//! is generated by clap_derive, because the generated code does not allow
//! injecting a custom clock implementation. Instead, we use a global variable
//! to store the current time in tests, and provide a way to override the
//! current time.
//!
//! When the `test-utils` feature is enabled, the `now()` function returns the
//! time set by the `override_now()` function, and panics if `now()` is called
//! without an override set first. The override function returns an RAII handle
//! that resets the global time override when it goes out of scope, to avoid
//! leaking state between tests.
//!
//! When the `test-utils` feature is disabled, the `now()` function returns the
//! current system time, and overrides are not possible. Application code should
//! depend on the crate with the `test-utils` feature disabled, and tests should
//! depend on the crate with the `test-utils` feature enabled.

#[cfg(feature = "test-utils")]
use std::sync::Mutex;

use chrono::DateTime;
use chrono::Utc;
#[cfg(feature = "test-utils")]
use lazy_static::lazy_static;

#[cfg(feature = "test-utils")]
lazy_static! {
    static ref NOW: Mutex<Option<DateTime<Utc>>> = Mutex::new(None);
}

#[cfg(feature = "test-utils")]
pub struct OverridingNow;

#[cfg(feature = "test-utils")]
impl Drop for OverridingNow {
    fn drop(&mut self) {
        let mut now_lock = NOW.lock().unwrap();
        *now_lock = None;
    }
}

#[cfg(feature = "test-utils")]
pub fn override_now(now: DateTime<Utc>) -> OverridingNow {
    let mut now_lock = NOW.lock().unwrap();
    *now_lock = Some(now);
    OverridingNow
}

#[cfg(feature = "test-utils")]
#[track_caller]
pub fn now() -> DateTime<Utc> {
    let caller = std::panic::Location::caller();
    let now_lock = NOW.lock().unwrap();
    (*now_lock).unwrap_or_else(|| {
        panic!(
            "In {caller}:
    
            now() called in a test without a time override set.
    
            Make sure to call override_now() at the beginning of the test, and
            make sure that the OverridingNow it returned is still in scope."
        )
    })
}

#[cfg(not(feature = "test-utils"))]
pub fn now() -> DateTime<Utc> {
    Utc::now()
}
